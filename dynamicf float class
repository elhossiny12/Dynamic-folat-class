#include<iostream>
#include<math.h>
#include<algorithm>
#include<string>
using namespace std;


class dynamicf {
	float *p;
	int s;
public:
	dynamicf() {
		p = NULL;
		s = 0;
	}
	int getsize() { return s; }
	void setsize(int news) {
		if (s == 0) { s = news; p = new  float[s]; return; }
		float *T = new float[news];
		int m = s;
		if (news<m) m = news;//sort
		for (int i = 0; i<m; i++)
			T[i] = p[i];
		delete[]p;
		p = T;
		s = news;

	}
	void setel(int i, float f) {
		p[i] = f;

	}
	float getel(int i) { return p[i]; }

	void add(float f) {
		setsize(s + 1);
		p[s - 1] = f;

	}
	void insert(int i, float f) {
		setsize(s + 1);
		for (int k = s - 1; k>i; k--)
			p[k] = p[k - 1];
		p[i] = f;
	}
	void remove(int i) {
		float val;
		for (int k = i; k<s - 1; k++) {
			val = p[k + 1];
			p[k + 1] = p[k];
			p[k] = val;
		}
		setsize(s - 1);

	}
	void tear(dynamicf &b) {
		float size = s + b.getsize();
		float m = s;
		setsize(size);
		int n = 0;
		for (int i = m; i<size; i++) {
			p[i] = b.getel(n);
			n++;
		}


	}


	~dynamicf() {
		if (p != NULL) delete[]p;

	}
	void RemoveAll();
	int Find(float f);
	void RemoveDublicates();
	void sort();
	void insertAt(int i, dynamicf &d);

};//////end of class
void dynamicf::RemoveAll() {
	p = NULL;
	s = 0;
}
int dynamicf::Find(float f) {
	for (int i = 0; i < s; i++) {
		if (p[i] == f) return i;
	}
	return -1;

}
void dynamicf::RemoveDublicates() {
	for (int i = 0; i < s; i++) {
		for (int j = i + 1; j<s; j++) {
			if (p[i] == p[j]) { remove(i); i--; break; }

		}
	}
}
void dynamicf::sort() {
	float temp;
	for (int i = 0; i < s; i++) {
		for (int j = i + 1; j < s; j++) {
			if (p[i] > p[j]) {
				temp = p[i];
				p[i] = p[j];
				p[j] = temp;
			}
		}
	}
}
void dynamicf::insertAt(int i, dynamicf &d) {
	int dSize = d.getsize();
	for (int k = 0; k < dSize; k++) {
		insert(i, d.getel(k));
		i++;
	}


}
int main() {
	dynamicf a1, b1;
	int x = 6;
	a1.setsize(x + 3);
	b1.setsize(x + 1);
	int n = 0;
	for (int i = 0; i<x + 3; i++) {
		cin >> n;
		a1.setel(i, n);

	}
	for (int i = 0; i<x + 1; i++) {
		cin >> n;
		b1.setel(i, n);

	}
	a1.insertAt(2, b1);
	for (int i = 0; i<a1.getsize(); i++) {
		cout << a1.getel(i) << " ";

	}
}